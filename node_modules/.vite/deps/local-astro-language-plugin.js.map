{
  "version": 3,
  "sources": ["../../local-astro-language-plugin/transform-anchor.js", "../../local-astro-language-plugin/client.js"],
  "sourcesContent": ["/** @type {import(\"./transform-anchor\").CreateAnchorTransformer} */\nexport const createAnchorTransformer = (config) => {\n  /** @type {import(\"./transform-anchor\").AnchorTransformer} */\n  return async (anchor) => {\n    const originalHref = (anchor.getAttribute(\"href\") || anchor.href)?.trim();\n    if (!originalHref) return;\n\n    const shoudNotChangeHref =\n      originalHref.includes(config.protocolIdentifier) || // Link contains a protocol, only local links should be changed\n      config.excludeStartWithPatterns.some((pattern) =>\n        originalHref.startsWith(pattern)\n      ); // If link starts with something like `mailto:`\n    if (shoudNotChangeHref) return;\n\n    // Contains the public prefix, links with this prefix will not be changed\n    if (originalHref.startsWith(config.publicPrefix)) {\n      anchor.setAttribute(\n        \"href\",\n        `${originalHref.substring(config.publicPrefix.length)}`\n      );\n      return originalHref;\n    }\n\n    const pathPrefix =\n      config.localPathPrefixes.find((prefix) =>\n        originalHref.startsWith(prefix)\n      ) ?? \"\";\n    if (pathPrefix === \"\") return;\n\n    const hrefWithoutPrefix = originalHref.substring(pathPrefix.length);\n\n    // Link had a hreflang, it will not be changed because it already know which language it is redirecting to\n    if (anchor.getAttribute(\"hreflang\")) return;\n\n    // Link already contains the current language code\n    if (hrefWithoutPrefix.startsWith(config.language)) {\n      anchor.setAttribute(\"hreflang\", config.language);\n      return;\n    }\n\n    anchor.setAttribute(\n      \"href\",\n      `${pathPrefix}${config.language}/${hrefWithoutPrefix}`\n    );\n    anchor.setAttribute(\"hreflang\", config.language);\n    return originalHref;\n  };\n};\n", "import { createAnchorTransformer } from \"./transform-anchor\";\n\n/** @type {import(\"./client\").transformAllAnchors} */\nexport const transformAllAnchors = async (config) => {\n  const htmlElement = document.querySelector(\"html\");\n\n  const anchorTransformer = createAnchorTransformer({\n    language: htmlElement.lang,\n    excludeStartWithPatterns: config.excludeStartWithPatterns,\n    localPathPrefixes: config.localPathPrefixes,\n    protocolIdentifier: config.protocolIdentifier,\n    publicPrefix: config.publicPrefix,\n  });\n\n  const anchorElements = Array.from(document.querySelectorAll(\"a\"));\n\n  const transformAnchorTasks = anchorElements.map(anchorTransformer);\n  const changedAnchorsHrefs = (await Promise.all(transformAnchorTasks)).filter(\n    (href) => Boolean(href)\n  );\n\n  if (config.logChanges)\n    console.log(config.consoleTag, \"\\n Changed tags\", changedAnchorsHrefs);\n};\n"],
  "mappings": ";;;AACO,IAAM,0BAA0B,CAAC,WAAW;AAEjD,SAAO,OAAO,WAAW;AAH3B;AAII,UAAM,gBAAgB,YAAO,aAAa,MAAM,KAAK,OAAO,SAAtC,mBAA6C;AACnE,QAAI,CAAC;AAAc;AAEnB,UAAM,qBACJ,aAAa,SAAS,OAAO,kBAAkB;AAAA,IAC/C,OAAO,yBAAyB;AAAA,MAAK,CAAC,YACpC,aAAa,WAAW,OAAO;AAAA,IACjC;AACF,QAAI;AAAoB;AAGxB,QAAI,aAAa,WAAW,OAAO,YAAY,GAAG;AAChD,aAAO;AAAA,QACL;AAAA,QACA,GAAG,aAAa,UAAU,OAAO,aAAa,MAAM,CAAC;AAAA,MACvD;AACA,aAAO;AAAA,IACT;AAEA,UAAM,aACJ,OAAO,kBAAkB;AAAA,MAAK,CAAC,WAC7B,aAAa,WAAW,MAAM;AAAA,IAChC,KAAK;AACP,QAAI,eAAe;AAAI;AAEvB,UAAM,oBAAoB,aAAa,UAAU,WAAW,MAAM;AAGlE,QAAI,OAAO,aAAa,UAAU;AAAG;AAGrC,QAAI,kBAAkB,WAAW,OAAO,QAAQ,GAAG;AACjD,aAAO,aAAa,YAAY,OAAO,QAAQ;AAC/C;AAAA,IACF;AAEA,WAAO;AAAA,MACL;AAAA,MACA,GAAG,UAAU,GAAG,OAAO,QAAQ,IAAI,iBAAiB;AAAA,IACtD;AACA,WAAO,aAAa,YAAY,OAAO,QAAQ;AAC/C,WAAO;AAAA,EACT;AACF;;;AC5CO,IAAM,sBAAsB,OAAO,WAAW;AACnD,QAAM,cAAc,SAAS,cAAc,MAAM;AAEjD,QAAM,oBAAoB,wBAAwB;AAAA,IAChD,UAAU,YAAY;AAAA,IACtB,0BAA0B,OAAO;AAAA,IACjC,mBAAmB,OAAO;AAAA,IAC1B,oBAAoB,OAAO;AAAA,IAC3B,cAAc,OAAO;AAAA,EACvB,CAAC;AAED,QAAM,iBAAiB,MAAM,KAAK,SAAS,iBAAiB,GAAG,CAAC;AAEhE,QAAM,uBAAuB,eAAe,IAAI,iBAAiB;AACjE,QAAM,uBAAuB,MAAM,QAAQ,IAAI,oBAAoB,GAAG;AAAA,IACpE,CAAC,SAAS,QAAQ,IAAI;AAAA,EACxB;AAEA,MAAI,OAAO;AACT,YAAQ,IAAI,OAAO,YAAY,mBAAmB,mBAAmB;AACzE;",
  "names": []
}
