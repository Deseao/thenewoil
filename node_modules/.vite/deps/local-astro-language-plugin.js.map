{
  "version": 3,
  "sources": ["../../local-astro-language-plugin/transform-anchor.js", "../../local-astro-language-plugin/client.js"],
  "sourcesContent": ["/** @type {import(\"./transform-anchor\").CreateAnchorTransformer} */\nexport const createAnchorTransformer = (config) => {\n\n    /** @type {import(\"./transform-anchor\").AnchorTransformer} */\n    return async (anchor) => {\n        const originalHref = (anchor.getAttribute(\"href\") || anchor.href)?.trim();\n        if (!originalHref) return;\n        \n        const shoudNotChangeHref = (\n            originalHref.includes(config.protocolIdentifier) || // Link contains a protocol, only local links should be changed\n            config.excludeStartWithPatterns.some((pattern) => originalHref.startsWith(pattern)) // If link starts with something like `mailto:`\n        );\n        if (shoudNotChangeHref) return;\n\n        // Contains the public prefix, links with this prefix will not be changed\n        if (originalHref.startsWith(config.publicPrefix)) {\n            anchor.setAttribute(\"href\", `${originalHref.substring(config.publicPrefix.length)}`);\n            return originalHref;\n        }\n\n        const pathPrefix = config.localPathPrefixes.find((prefix) => originalHref.startsWith(prefix)) ?? \"\";\n        if (pathPrefix === \"\") return;\n\n        const hrefWithoutPrefix = originalHref.substring(pathPrefix.length);\n\n        // Link had a hreflang, it will not be changed because it already know which language it is redirecting to\n        if (anchor.getAttribute(\"hreflang\")) return;\n\n        // Link already contains the current language code\n        if (hrefWithoutPrefix.startsWith(config.language)) {\n            anchor.setAttribute(\"hreflang\", config.language);\n            return;\n        }\n\n        anchor.setAttribute(\"href\", `${pathPrefix}${config.language}/${hrefWithoutPrefix}`);\n        anchor.setAttribute(\"hreflang\", config.language);\n        return originalHref;\n    };\n\n};", "import { createAnchorTransformer } from \"./transform-anchor\";\n\n/** @type {import(\"./client\").transformAllAnchors} */\nexport const transformAllAnchors = async (config) => {\n    const htmlElement = document.querySelector(\"html\");\n\n    const anchorTransformer = createAnchorTransformer({\n        language: htmlElement.lang,\n        excludeStartWithPatterns: config.excludeStartWithPatterns,\n        localPathPrefixes: config.localPathPrefixes,\n        protocolIdentifier: config.protocolIdentifier,\n        publicPrefix: config.publicPrefix\n    });\n\n    const anchorElements = Array.from(document.querySelectorAll(\"a\"));\n    \n    const transformAnchorTasks = anchorElements.map(anchorTransformer);\n    const changedAnchorsHrefs = (await Promise.all(transformAnchorTasks)).filter((href) => Boolean(href));\n\n    if (config.logChanges) console.log(config.consoleTag, \"\\n Changed tags\", changedAnchorsHrefs);\n};"],
  "mappings": ";;;AACO,IAAM,0BAA0B,CAAC,WAAW;AAG/C,SAAO,OAAO,WAAW;AAJ7B;AAKQ,UAAM,gBAAgB,YAAO,aAAa,MAAM,KAAK,OAAO,SAAtC,mBAA6C;AACnE,QAAI,CAAC;AAAc;AAEnB,UAAM,qBACF,aAAa,SAAS,OAAO,kBAAkB;AAAA,IAC/C,OAAO,yBAAyB,KAAK,CAAC,YAAY,aAAa,WAAW,OAAO,CAAC;AAEtF,QAAI;AAAoB;AAGxB,QAAI,aAAa,WAAW,OAAO,YAAY,GAAG;AAC9C,aAAO,aAAa,QAAQ,GAAG,aAAa,UAAU,OAAO,aAAa,MAAM,GAAG;AACnF,aAAO;AAAA,IACX;AAEA,UAAM,aAAa,OAAO,kBAAkB,KAAK,CAAC,WAAW,aAAa,WAAW,MAAM,CAAC,KAAK;AACjG,QAAI,eAAe;AAAI;AAEvB,UAAM,oBAAoB,aAAa,UAAU,WAAW,MAAM;AAGlE,QAAI,OAAO,aAAa,UAAU;AAAG;AAGrC,QAAI,kBAAkB,WAAW,OAAO,QAAQ,GAAG;AAC/C,aAAO,aAAa,YAAY,OAAO,QAAQ;AAC/C;AAAA,IACJ;AAEA,WAAO,aAAa,QAAQ,GAAG,aAAa,OAAO,YAAY,mBAAmB;AAClF,WAAO,aAAa,YAAY,OAAO,QAAQ;AAC/C,WAAO;AAAA,EACX;AAEJ;;;ACpCO,IAAM,sBAAsB,OAAO,WAAW;AACjD,QAAM,cAAc,SAAS,cAAc,MAAM;AAEjD,QAAM,oBAAoB,wBAAwB;AAAA,IAC9C,UAAU,YAAY;AAAA,IACtB,0BAA0B,OAAO;AAAA,IACjC,mBAAmB,OAAO;AAAA,IAC1B,oBAAoB,OAAO;AAAA,IAC3B,cAAc,OAAO;AAAA,EACzB,CAAC;AAED,QAAM,iBAAiB,MAAM,KAAK,SAAS,iBAAiB,GAAG,CAAC;AAEhE,QAAM,uBAAuB,eAAe,IAAI,iBAAiB;AACjE,QAAM,uBAAuB,MAAM,QAAQ,IAAI,oBAAoB,GAAG,OAAO,CAAC,SAAS,QAAQ,IAAI,CAAC;AAEpG,MAAI,OAAO;AAAY,YAAQ,IAAI,OAAO,YAAY,mBAAmB,mBAAmB;AAChG;",
  "names": []
}
